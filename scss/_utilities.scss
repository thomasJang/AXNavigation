
// WebKit-style focus
@mixin tab-focus() {
// Default
  outline: thin dotted;
// WebKit
  outline: 0; //5px auto -webkit-focus-ring-color;
  //outline-offset: -2px;
}

@mixin form-control-focus($color) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
	border-color: $color;
	outline: 0;
	@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba);
  }
}

@mixin placeholder($color: $input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
	color: $color;
	opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
	@if $prefix == webkit {
	  @if $prefix-for-webkit {
		-webkit-#{$property}: $value;
	  }
	} @else if $prefix == moz {
	  @if $prefix-for-mozilla {
		-moz-#{$property}: $value;
	  }
	} @else if $prefix == ms {
	  @if $prefix-for-microsoft {
		-ms-#{$property}: $value;
	  }
	} @else if $prefix == o {
	  @if $prefix-for-opera {
		-o-#{$property}: $value;
	  }
	} @else if $prefix == spec {
	  @if $prefix-for-spec {
		#{$property}: $value;
	  }
	} @else  {
	  @warn "Unrecognized prefix: #{$prefix}";
	}
  }
}

@mixin box-shadow ($shadows...) {
  @include prefixer(box-shadow, $shadows, spec);
}

@mixin background-size ($lengths...) {
  @include prefixer(background-size, $lengths, spec);
}

@mixin opacity($opacity){
  @if $opacity == 1 {
	filter: unquote("progid:DXImageTransform.Microsoft.Alpha(enabled=false)");
  }
  @else {
	filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
  }
  opacity: $opacity;
}

@mixin ax-border-radius($border-radius, $direction:"", $adjust:0){
	@if (type_of($border-radius) == "list") {
		@if($direction == ""){
			border-top-left-radius: nth($border-radius, 1)+$adjust;
			border-top-right-radius: nth($border-radius, 2)+$adjust;
			border-bottom-right-radius: nth($border-radius, 3)+$adjust;
			border-bottom-left-radius: nth($border-radius, 4)+$adjust;
		}
		@else if($direction == "top") {
			border-top-left-radius: nth($border-radius, 1)+$adjust;
			border-top-right-radius: nth($border-radius, 2)+$adjust;
		}
		@else if($direction == "bottom") {
			border-bottom-right-radius: nth($border-radius, 3)+$adjust;
			border-bottom-left-radius: nth($border-radius, 4)+$adjust;
		}
		@else if($direction == "left") {
			border-top-left-radius: nth($border-radius, 1)+$adjust;
			border-bottom-left-radius: nth($border-radius, 4)+$adjust;
		}
		@else if($direction == "right") {
			border-top-right-radius: nth($border-radius, 2)+$adjust;
			border-bottom-right-radius: nth($border-radius, 3)+$adjust;
		}
	}
	@else {
		@if($direction == "") {
			border-radius: $border-radius+$adjust;
		}
		@else if($direction == "top") {
			border-top-left-radius: $border-radius+$adjust;
			border-top-right-radius: $border-radius+$adjust;
		}
		@else if($direction == "bottom") {
			border-bottom-left-radius: $border-radius+$adjust;
			border-bottom-right-radius: $border-radius+$adjust;
		}
		@else if($direction == "left") {
			border-top-left-radius: $border-radius+$adjust;
			border-bottom-left-radius: $border-radius+$adjust;
		}
		@else if($direction == "right") {
			border-top-right-radius: $border-radius+$adjust;
			border-bottom-right-radius: $border-radius+$adjust;
		}
	}
}

@mixin ax-gradient ($start: #ffffff, $stop: $start) {
	background: $start;
	@include background-image(linear-gradient(top, $start, $stop));
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=#{$start}, endColorstr=#{$stop});
}